import boto3
from io import BytesIO
import zipfile
import mimetypes

def lambda_handler(event, context):
    try:
        #lets see what the event looks like
        print(event)
        
        # aws object declarations
        s3 = boto3.resource('s3')
        # declare variables for the topic to send notifications on
        sns = boto3.resource('sns')
        # this should really be externalized
        topic = sns.Topic('arn:aws:sns:us-east-1:755216603586:deployPortfolio')
        
        #specify default location details (so that the function runs even when not invoked by codepipeline)
        location = {
            "bucketName": 'srajgopalan-portfoliobuild',
            "objectKey":  'portfoliobuild.zip'
        }
        
        # grab job details from codepipeline event trigger
        job = event.get("CodePipeline.job")
        if job:
            for artifact in job["data"]["inputArtifacts"]:
                if artifact["name"] == "MyAppBuild":
                    location = artifact["location"]["s3Location"]
        
        print("Deploying Website Portfolio from" + str(location))
    
        portfolio_bucket = s3.Bucket('portfolio.shrikanth.click')
        build_bucket = s3.Bucket(location["bucketName"])
        
        #declare a stream of bytes for storing the file in memory
        portfolio_zip = BytesIO()
        
        # download portfolio zip generated by aws codebuild
        build_bucket.download_fileobj(location["objectKey"],portfolio_zip)
        
        # iterate through objects in zipfile and upload to website bucket
        with zipfile.ZipFile(portfolio_zip) as myzip:
            for nm in myzip.namelist():
                obj = myzip.open(nm)
                portfolio_bucket.upload_fileobj(obj,nm,ExtraArgs={'ContentType': mimetypes.guess_type(nm)[0]})
                portfolio_bucket.Object(nm).Acl().put(ACL='public-read')
        
        topic.publish(Subject="Portfolio Deployment Success :)",Message="The portfolio was deployed to the S3 website bucket successfully!")
        print("A Job well done!")
        # we need to tell codepipeline that the job was successfull
        if job:
            codepipeline = boto3.client('codepipeline')
            codepipeline.put_job_success_result(jobId=job["id"])
    except:
        topic.publish(Subject="Portfolio Deployment Failure :(",Message="The portfolio could not be deployed to the S3 bucket. Check the logs in CloudWatch for details")
        # we need to tell codepipeline that the job was a failure
        if job:
            codepipeline = boto3.client('codepipeline')
            codepipeline.put_job_failure_result(jobId=job["id"])
        #raise the exception again
        raise
    
    return 'Hello from Lambda'
